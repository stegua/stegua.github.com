<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: graph coloring | Spaghetti Optimization]]></title>
  <link href="http://stegua.github.io/blog/categories/graph-coloring/atom.xml" rel="self"/>
  <link href="http://stegua.github.io/"/>
  <updated>2019-01-27T13:54:34+01:00</updated>
  <id>http://stegua.github.io/</id>
  <author>
    <name><![CDATA[Stefano Gualandi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Graph Coloring: Column Generation or Column Enumeration?]]></title>
    <link href="http://stegua.github.io/blog/2015/07/04/column-enumeration/"/>
    <updated>2015-07-04T16:45:00+02:00</updated>
    <id>http://stegua.github.io/blog/2015/07/04/column-enumeration</id>
    <content type="html"><![CDATA[<style type="text/css">
table { width:100%; }
thead {
   background-color: rgba(0,0,255,0.3);
   color: black;
   text-indent: 14px;
   text-align: left;
}
td { padding:4px; }
tbody tr:nth-child(odd) { background-color: rgba(0, 0, 100, 0.2);  }
tbody tr:nth-child(even) { background-color: rgba(0, 0, 100, 0.1); }
.title { color: #07235F; }
.journal { font-style: italic; }
</style>

<p>In this post, I like to share a simple idea on how to solve to optimality some <a href="http://www.info.univ-angers.fr/pub/porumbel/graphs/">hard instances</a> of the <a href="http://en.wikipedia.org/wiki/Graph_coloring">Graph Coloring</a> problem. This simple idea yields a “new time” record for a couple of hard instances. </p>

<p>To date, the best <strong>exact</strong> approach to solve Graph Coloring 
is based on <em><a href="http://en.wikipedia.org/wiki/Branch_and_price">Branch-and-Price</a></em> [1, 2, 3].
The branch-and-price method is completely different from the Constraint Programming approach I discussed in a <a href="http://stegua.github.io/blog/2013/06/28/gecol/">previous post</a>. A key component of Branch-and-Price is the <em>column generation</em> phase, which is 
intuitively quite simple, but mathematically rather involved for a short blog post.</p>

<p>Here, I want to show you that a modern Mixed Integer Programming (MIP) solver, such as <a href="http://www.gurobi.com/">Gurobi</a> or <a href="http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/">CPLEX</a>, can solve a few hard instances of graph coloring with the following <em>“null implementation effort”</em>:</p>

<ol>
  <li>Enumerate all possible columns</li>
  <li>Build a <a href="http://en.wikipedia.org/wiki/MPS_%28format%29">.mps</a> instance with those columns</li>
  <li>Use a MIP solver to solve the .mps instance</li>
</ol>

<p>Indeed, in this post we try to answer to the following question:</p>

<blockquote>
  <p>Is there any hope to solve any hard graph coloring instances with this naive approach?</p>
</blockquote>

<h2 id="formulation">Formulation</h2>
<p>Given an undirected graph <script type="math/tex">G=(V,E)</script> and a set of colors <script type="math/tex">K</script>, 
the minimum (vertex) graph coloring problem consists of assigning a color to each vertex,
while every pair of adjacent vertices gets a different color. The objective is to minimize the number of colors used in a solution.</p>

<p>The branch-and-price approach to graph coloring is based on a <em>set covering</em> formulation.
Let <script type="math/tex">S</script> be the collection of all the maximal stable sets of <script type="math/tex">G</script>,
and let <script type="math/tex">S_i \subseteq S</script> be the maximal stable sets that contain the vertex <script type="math/tex">i</script>.
Let <script type="math/tex">\lambda_s</script> be a 0-1 variable equal to 1 if all the vertices in the maximal stable set <script type="math/tex">s \in S</script> 
get assigned the same color. Hence, the set covering model is:</p>

<script type="math/tex; mode=display">\min \sum_{s \in S} \lambda_s \mbox{ such that } \sum_{s \in S_i} \lambda_s \geq 1, \forall i \in N, \lambda_s \in \{0,1\}, \forall s \in S.</script>

<p>Indeed, we <em>“cover”</em> every vertex of <script type="math/tex">G</script> with the minimal number of maximal stable sets.
The issue with this model is the total number of maximal stable sets in <script type="math/tex">G</script>, which <em>is exponential in the number of vertices of G</em>.</p>

<p>Column Generation is a “mathematically elegant” method to by-pass this issue:
it lets you to solve the set covering model by <em>generating</em> a very small subset of the elements in <script type="math/tex">S</script>. This happens by repeatedly solving an auxiliary problem,
called the <em>pricing</em> subproblem. For graph coloring, the pricing subproblem consists of a Maximum Weighted Stable Set problem.
If you are interested in Column Generation, I recommend you to look at the first chapter of
the <a href="http://www.springer.com/gp/book/9780387254852">Column Generation book</a>,
which contains a nice tutorial on the topic, and I would <strong>strongly</strong> recommend reading the nice survey “Selected Topics in Column Generation”, [4].</p>

<blockquote>
  <p>How many maximal stable sets are in a hard graph coloring instance?</p>
</blockquote>

<p>If this number were not so high, we could enumerate all the stable sets in <script type="math/tex">S</script>
and attempt to directly solve the set covering model without resorting to column generation.
However, <em>“high”</em> is a subjective measure, so let me do some computations on my laptop and give you some precise numbers.</p>

<h2 id="hard-instances">Hard instances</h2>
<p>Among the <a href="http://mat.gsia.cmu.edu/COLOR/instances.html">DIMACS instances</a> of Graph Coloring, there are a few instances
proposed by David Johnson, which are still unsolved (in the sense that we have not a computational proof of optimality of the best known upper bounds).</p>

<p>The table below shows the dimensions of these instances. The name of instances are DSJC{n}.{d}, where {n} is the number of vertices and {d} gives the density of the graph (e.g., DSJC125.9 has 125 vertices and 0.9 of density).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Graph</th>
      <th style="text-align: center">Nodes</th>
      <th style="text-align: center">Edges</th>
      <th style="text-align: center">Max stable sets</th>
      <th style="text-align: center">Enumeration Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DSJC125.9</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">6,961</td>
      <td style="text-align: center">524</td>
      <td style="text-align: center">0.00</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.9</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">27,897</td>
      <td style="text-align: center">2,580</td>
      <td style="text-align: center">0.01</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.9</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">112,437</td>
      <td style="text-align: center">14,560</td>
      <td style="text-align: center">0.12</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.9</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">449,449</td>
      <td style="text-align: center">100,389</td>
      <td style="text-align: center">2.20</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.5</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">3,891</td>
      <td style="text-align: center">43,268</td>
      <td style="text-align: center">0.53</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.5</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">15,668</td>
      <td style="text-align: center">1,470,363</td>
      <td style="text-align: center">43.16</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.5</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">62,624</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.5</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">249,826</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.1</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">736</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.1</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">3,218</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.1</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">12,458</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.1</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">49,629</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
  </tbody>
</table>

<p><br />
As you can see the number of maximal stable sets (i.e. the cardinality of <script type="math/tex">S</script>)
of several instances is not so high, above all for very dense graphs, where the number of stables set is less than the number of edges. However, for sparse graphs, the number of maximal stable sets is too large for the memory available in my laptop.</p>

<p>Now, let me re-state the main question of this post:</p>

<blockquote>
  <p>Can we <strong>enumerate</strong> all the maximal stable sets of <script type="math/tex">G</script> and use a  MIP solver such as <a href="http://www.gurobi.com/">Gurobi</a> or <a href="http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/">CPLEX</a> to solve any Johnson’s instance of Graph Coloring?</p>
</blockquote>

<h2 id="results">Results</h2>
<p>I have written a small script which uses <a href="http://users.aalto.fi/~pat/cliquer.html">Cliquer</a> to enumerate all the maximal
stable sets of a graph, and then I generate an <a href="http://en.wikipedia.org/wiki/MPS_%28format%29">.mps</a>
instance for each of the DSJC instance where I was able to store all maximal stable sets.
The .mps file are on my public <a href="https://github.com/stegua/MyBlogEntries/tree/master/Coloring">GitHub repository for this post</a>.</p>

<p>The table below shows some numbers for the sparse instances obtained using Gurobi (v6.0.0)
with a timeout of 10 minutes on my laptop. If you compare these numbers with the results published in the literature, you can see that they are not bad at all.</p>

<p>Believe me, these number are not bad at all, and establish a new <strong>TIME RECORD</strong>.</p>

<p>For example, the instance DSJC250.9 was solved to optimality only recently in
11094 seconds by [3], while the column enumeration approach solves the same instance on a similar hardware in only 23 seconds (!), and, honestly, our work in [2] did not solve this instance to optimality at all.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Graph</th>
      <th style="text-align: center">Best known</th>
      <th style="text-align: center">Enum. Time</th>
      <th style="text-align: center">Run time</th>
      <th style="text-align: center">LB</th>
      <th style="text-align: center">UB</th>
      <th style="text-align: center">Time [2]</th>
      <th style="text-align: center">LB[2]</th>
      <th style="text-align: center">UB [2]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DSJC125.9</td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center">0.00</td>
      <td style="text-align: center"><strong>0.44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center">44</td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.9</td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center">0.01</td>
      <td style="text-align: center"><strong>23</strong></td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">71</td>
      <td style="text-align: center">72</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.9</td>
      <td style="text-align: center">128</td>
      <td style="text-align: center">0.12</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">123</td>
      <td style="text-align: center"><strong>128</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">123</td>
      <td style="text-align: center">136</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.9</td>
      <td style="text-align: center">222</td>
      <td style="text-align: center">2.20</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">215</td>
      <td style="text-align: center"><strong>229</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">215</td>
      <td style="text-align: center">245</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.5</td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center">0.53</td>
      <td style="text-align: center"><strong>70.6</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center">19033</td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.5</td>
      <td style="text-align: center">28</td>
      <td style="text-align: center">43.16</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">26</td>
      <td style="text-align: center">33</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">26</td>
      <td style="text-align: center">31</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<blockquote>
  <p>Can we ever solve to optimality DSJC500.9 and DSJC1000.9 via Column Enumeration?</p>
</blockquote>

<p>I would say:</p>

<blockquote>
  <p>“Yes, we can!”</p>
</blockquote>

<p>… but likely we need to be smarter while branching on the decision variables, since the default branching strategy of a generic MIP solver does not exploit the structure of the problem. If I had the time to work again on Graph Coloring, I would likely use the same branching scheme used in [2], where we combined a Zykov’s branching rule with a randomized <a href="http://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search">iterative deepening depth-first search</a> (randomised because at each restart we were using a different initial pool of columns). Another interesting option would be to tighten the set covering formulation with valid inequalities, by starting with those studied in [5]. </p>

<p>In conclusion, I believe that enumerating all columns can be a simple but good starting point to attempt to solve to optimality at least the instances DSJC500.9 and DSJC1000.9.</p>

<p>Do you have some spare time and are you willing to take up the challenge?</p>

<h2 id="references">References</h2>
<ol>
  <li>
    <p>A Mehrotra, MA Trick.
<span class="title">A column generation approach for graph coloring</span>.
<span class="journal">INFORMS Journal on Computing</span>. Fall 1996 vol. 8(4), pp.344-354. 
<a href="http://joc.journal.informs.org/content/8/4/344.short ">[pdf]</a></p>
  </li>
  <li>
    <p>S. Gualandi and F. Malucelli.
<span class="title">Exact Solution of Graph Coloring Problems via Constraint Programming and Column Generation</span>.
<span class="journal">INFORMS Journal on Computing</span>. Winter 2012 vol. 24(1), pp.81-100. 
<a href="http://joc.journal.informs.org/content/24/1/81.short">[pdf]</a>
<a href="http://www.optimization-online.org/DB_FILE/2010/03/2568.pdf">[preprint]</a></p>
  </li>
  <li>
    <p>S. Held, W. Cook, E.C. Sewell.
<span class="title">Maximum-weight stable sets and safe lower bounds for graph coloring</span>.
<span class="journal">Mathematical Programming Computation</span>. December 2012, Volume 4, Issue 4, pp 363-381.
<a href="http://link.springer.com/content/pdf/10.1007%2Fs12532-012-0042-3.pdf">[pdf]</a></p>
  </li>
  <li>
    <p>M. Lubbecke and J. Desrosiers.
<span class="title">Selected topics in column generation</span>.
<span class="journal">Operations Research</span>. 2005, Volume 53, Issue 6, pp 1007-1023.
<a href="http://pubsonline.informs.org/doi/abs/10.1287/opre.1050.0234">[pdf]</a></p>
  </li>
  <li>
    <p>
<span class="title">Set covering and packing formulations of graph coloring: algorithms and first polyhedral results</span>.
<span class="journal">Discrete Optimization</span>. 2009, Volume 6, Issue 2, pp 135-147.
<a href="http://www.sciencedirect.com/science/article/pii/S1572528608000716">[pdf]</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeCol: a Graph Coloring solver on top of Gecode]]></title>
    <link href="http://stegua.github.io/blog/2013/06/28/gecol/"/>
    <updated>2013-06-28T15:00:00+02:00</updated>
    <id>http://stegua.github.io/blog/2013/06/28/gecol</id>
    <content type="html"><![CDATA[<style type="text/css">
.title { color: #07235F; }
.journal { font-style: italic; }
</style>

<p>This post is about solving the classical <strong>Graph Coloring</strong> problem by using a simple solver, named here <strong>GeCol</strong>, that is built on top of the Constraint Programming (CP) solver <a href="http://www.gecode.org">Gecode</a>. The approach of GeCol is based on the CP model described in [1]. Here, we want to explore some of the new features of the last version of Gecode (version 4.0.0), namely: </p>

<ul>
  <li><em>Lightweight Dynamic Symmetry Breaking (LDSB)</em> [2]</li>
  <li><em>Accumulated Failure Count (AFC)</em> and <em>Activity-based</em> strategies for variable selection while branching, combined with <em>Restart Based Search</em></li>
</ul>

<p>We are going to present computational results using these features to solve the <a href="https://sites.google.com/site/graphcoloring/vertex-coloring">instances</a> of the <a href="http://dimacs.rutgers.edu/Challenges/">Graph Coloring DIMACS Challenge</a>. However, this post is not going to describe in great details what these features are: please, for this purpose, refer to the <a href="http://www.gecode.org/doc-latest/MPG.pdf">Modeling and Programming with Gecode</a> book.</p>

<p>As usual, all the sources used to write this post are publicly available on 
<a href="https://github.com/stegua/MyBlogEntries/tree/master/Coloring">my GitHub repository</a>.</p>

<h3 id="modeling-graph-coloring-with-constraint-programming">Modeling Graph Coloring with Constraint Programming</h3>

<p>Given an undirected graph <script type="math/tex">G=(V,E)</script> and a set of colors <script type="math/tex">K</script>, the minimum (vertex) graph coloring problem consists of assigning a color to each vertex, while every pair of adjacent vertices gets a different color. The objective is to minimize the number of colors.</p>

<p>To model this problem with CP, we can use for each vertex <script type="math/tex">i</script> an integer variable <script type="math/tex">x_i</script> with domain equals to <script type="math/tex">K</script>: if <script type="math/tex">x_i=k</script>, then color <script type="math/tex">k</script> is assigned to vertex <script type="math/tex">i</script>.
Using (inclusion-wise) <em>maximal cliques</em>, it is possible to post constraints on subsets of adjacent vertices: every subset of vertices belonging to the same clique must get a different color. In CP, we can use the well-known <code>alldifferent</code> constraint for posting these constraints.</p>

<p>In practice, to build our CP model, first, we find a collection of maximal cliques <script type="math/tex">C</script>, such that for every edge <script type="math/tex">(i,j) \in E</script> there exists at least a clique <script type="math/tex">c \in C</script> that contains both vertices <script type="math/tex">i</script> and <script type="math/tex">j</script>. Second, we post the following constraints:</p>

<script type="math/tex; mode=display">\mbox{alldifferent}([x_c]) \qquad \forall c \in C</script>

<p>where <script type="math/tex">x_c</script> denotes the subset of variables corresponding to the vertices that belong to the clique <script type="math/tex">c</script>.</p>

<p>In order to minimize the number of colors, we use a simple iterative procedure. Every time we found a coloring with <script type="math/tex">k</script> colors, we restart the search by restricting the cardinality of <script type="math/tex">K</script> to <script type="math/tex">k-1</script>. If no feasible coloring exists with <script type="math/tex">k-1</script> colors, we have proved optimality for the last feasible coloring found, i.e. <script type="math/tex">\chi(G)=k</script>.</p>

<p>In addition, we apply a few basic preprocessing steps that are described in [1].
The maximal cliques are computed using <strong>Cliquer v1.21</strong> [5].</p>

<h3 id="lightweight-dynamic-symmetry-breaking">Lightweight Dynamic Symmetry Breaking</h3>

<p>The Graph Coloring problem is an optimization problem that has several equivalent optimum solutions: for instance, given an optimal assignment of colors to vertices, any permutation of the colors, gives a solution with the same optimum value.</p>

<p>While this property is implicitly considered in <em>Column Generation approaches</em> to Graph Coloring (e.g., see [3], [1], and [4]), the CP model we have just presented, suffers from symmetries issues: the values of the domains of the integer variables are symmetric.</p>

<p>The <strong>Lightweight Dynamic Symmetry Breaking</strong> is a strategy for dealing with this issue [2].
In Gecode, you can define a set of values that are symmetric as follows:</p>

<p><code>Symmetries syms;
 syms &lt;&lt; ValueSymmetry(IntArgs::create(k,1));</code></p>

<p>and then when posting the branching strategy you just write (just note that use of object <code>syms</code>):</p>

<p><code>branch(*this, x, INT_VAR_SIZE_MIN(), INT_VAL_MIN(), syms);</code></p>

<p>With <strong><em>three lines of code</em></strong>, you have solved (some of) the symmetry issues.</p>

<blockquote>
  <p>How efficient is <em>Lightweight Dynamic Symmetry Breaking</em> for Graph Coloring?</p>
</blockquote>

<p>We try to answer to this question with the plot below that shows the results for two versions of GeCol:</p>

<ul>
  <li>(A) The first version without any breaking symmetry strategy</li>
  <li>(B) The second version with the Lightweight Dynamic Breaking Symmetry</li>
</ul>

<p>Both versions select for branching the variable with the smallest domain size.
The plot reports the empirical cumulative distribution as function of run time (in log-scale).
The tests were run with a timeout of 300 seconds on a quite old server. 
Note that at the timeout, the version with LDBS has solved around 55% of the instances, while the version without LDBS has solved only around 48% of the instances.</p>

<p><img class="center" src="../../../../../../images/Ecdf1.png"></p>

<h3 id="accumulated-failure-count-and-activity-based-branching">Accumulated Failure Count and Activity-based Branching</h3>
<p>The second new feature of Gecode that we explore here is the <em>Accumulated Failure Count</em> and the <em>Activity-based</em> branching strategies.</p>

<p>While solving any CP model, the strategy used to select the next variable to branch over is very important. The <em>Accumulated Failure Count</em> strategy stores the cumulative number of failures for each variable (for details see Section 8.5 in <a href="http://www.gecode.org/doc-latest/MPG.pdf">MPG</a>). The <em>Activity-based</em> search does something similar, but instead of counting failures, measures the activity of each variable.
In a sense, these two strategies try to <em>learn</em> from failures and activities as they occur during the search process. </p>

<p>These two branching strategies are more effective when combined with <em>Restart Based Search</em>: the solver performs the search with increasing cutoff values on the number of failures. Gecode offers several optional strategies to improve the cutoff. In our tests, we have used a geometric cutoff sequence (Section 9.4 in <a href="http://www.gecode.org/doc-latest/MPG.pdf">MPG</a>).</p>

<blockquote>
  <p>How effective are the <strong>Accumulated Failure Count</strong> and the <strong>Activity-based</strong> strategies for Graph Coloring when combined with <strong>Restart Based Search</strong>?</p>
</blockquote>

<p>The second plot below shows a comparison of 3 versions of GeCol, with 3 different branching strategies:</p>

<ul>
  <li>(A) Select the variable with smallest domain size</li>
  <li>(B) Select the variable with largest Activity Cumulated value</li>
  <li>(C) Select the variable with largest Accumulated Failure Count (AFC) value</li>
</ul>

<p>The last strategy is tremendously efficient: it dominates the other two strategies, and it is able to solve more of the 60% of the considered instances within the timeout of 300 seconds.</p>

<p><img class="center" src="../../../../../../images/Ecdf2.png"></p>

<p>However, it is possible to do still slightly better. Likely, at the begging of the search phase, several variables have the same value of AFC. Therefore, it is possible to improve the branching strategy by breaking ties: we can divide the ACT or the AFC value of a variable by the its domain size. The next plot shows the results with these other branching strategies:</p>

<ul>
  <li>(A) Select the variable with largest ratio of variable degree vs. domain size</li>
  <li>(B) Select the variable with largest ratio of Activity Cumulated value vs. domain size</li>
  <li>(C) Select the variable with largest ratio of Accumulated Failure Count vs. domain size</li>
</ul>

<p><img class="center" src="../../../../../../images/Ecdf3.png"></p>

<h2 id="conclusions">Conclusions</h2>
<p>The new features of Gecode are very interesting and offer plenty of options.
The LDBS is very general, and it could be easily applied to several other combinatorial optimization problems.
Also the new branching strategies gives important enhancements, above all when combined with restart based search.</p>

<blockquote>
  <p>”…with great power there must also come – great responsibility!” (Uncle Ben, The Amazing Spider-Man, n.660, Marvel Comics) </p>
</blockquote>

<p>As a drawback, it is becoming harder and harder to find the best parameter configuration for solvers as Gecode (but this is true also for other type of solvers, e.g. Gurobi and Cplex).</p>

<p>Can you find or suggest a better parameter configuration for GeCol?</p>

<h2 id="references">References</h2>
<ol>
  <li>
    <p>S. Gualandi and F. Malucelli.
<span class="title">Exact Solution of Graph Coloring Problems via Constraint Programming and Column Generation</span>.
<span class="journal">INFORMS Journal on Computing</span>. Winter 2012 vol. 24(1), pp.81-100. 
<a href="http://joc.journal.informs.org/content/24/1/81.short">[pdf]</a>
<a href="http://www.optimization-online.org/DB_FILE/2010/03/2568.pdf">[preprint]</a></p>
  </li>
  <li>
    <p>C. Mears, M.G. de la Banda, B. Demoen, M. Wallace.
<span class="title">Lightweight dynamic symmetry breaking</span>.
<span class="journal">In Eighth International Workshop on Symmetry in Constraint Satisfaction Problems,
SymCon’08, 2008.</span> 
<a href="http://www.aloul.net/symcon/Mears2-Symcon08.pdf">[pdf]</a></p>
  </li>
  <li>
    <p>A Mehrotra, MA Trick.
<span class="title">A column generation approach for graph coloring</span>.
<span class="journal">INFORMS Journal on Computing</span>. Fall 1996 vol. 8(4), pp.344-354. 
<a href="http://joc.journal.informs.org/content/8/4/344.short ">[pdf]</a></p>
  </li>
  <li>
    <p>S. Held, W. Cook, E.C. Sewell.
<span class="title">Maximum-weight stable sets and safe lower bounds for graph coloring</span>.
<span class="journal">Mathematical Programming Computation</span>. December 2012, Volume 4, Issue 4, pp 363-381.
<a href="http://link.springer.com/content/pdf/10.1007%2Fs12532-012-0042-3.pdf">[pdf]</a></p>
  </li>
  <li>
    <p>Patric R.J. Ostergard.
<span class="title">A fast algorithm for the maximum clique problem</span>.
<span class="journal">Discrete Applied Mathematics</span>, 
vol. 120(1-3), pp. 197–207, 2002
<a href="http://citeseerx.ist.psu.edu/viewdoc/similar?doi=10.1.1.28.7666&amp;type=cc">[pdf]</a>
</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
