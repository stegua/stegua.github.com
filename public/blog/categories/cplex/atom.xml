<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CPLEX | Spaghetti Optimization]]></title>
  <link href="http://stegua.github.io/blog/categories/cplex/atom.xml" rel="self"/>
  <link href="http://stegua.github.io/"/>
  <updated>2019-01-27T13:50:00+01:00</updated>
  <id>http://stegua.github.io/</id>
  <author>
    <name><![CDATA[Stefano Gualandi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Graph Coloring: Column Generation or Column Enumeration?]]></title>
    <link href="http://stegua.github.io/blog/2015/07/04/column-enumeration/"/>
    <updated>2015-07-04T16:45:00+02:00</updated>
    <id>http://stegua.github.io/blog/2015/07/04/column-enumeration</id>
    <content type="html"><![CDATA[<style type="text/css">
table { width:100%; }
thead {
   background-color: rgba(0,0,255,0.3);
   color: black;
   text-indent: 14px;
   text-align: left;
}
td { padding:4px; }
tbody tr:nth-child(odd) { background-color: rgba(0, 0, 100, 0.2);  }
tbody tr:nth-child(even) { background-color: rgba(0, 0, 100, 0.1); }
.title { color: #07235F; }
.journal { font-style: italic; }
</style>

<p>In this post, I like to share a simple idea on how to solve to optimality some <a href="http://www.info.univ-angers.fr/pub/porumbel/graphs/">hard instances</a> of the <a href="http://en.wikipedia.org/wiki/Graph_coloring">Graph Coloring</a> problem. This simple idea yields a “new time” record for a couple of hard instances. </p>

<p>To date, the best <strong>exact</strong> approach to solve Graph Coloring 
is based on <em><a href="http://en.wikipedia.org/wiki/Branch_and_price">Branch-and-Price</a></em> [1, 2, 3].
The branch-and-price method is completely different from the Constraint Programming approach I discussed in a <a href="http://stegua.github.io/blog/2013/06/28/gecol/">previous post</a>. A key component of Branch-and-Price is the <em>column generation</em> phase, which is 
intuitively quite simple, but mathematically rather involved for a short blog post.</p>

<p>Here, I want to show you that a modern Mixed Integer Programming (MIP) solver, such as <a href="http://www.gurobi.com/">Gurobi</a> or <a href="http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/">CPLEX</a>, can solve a few hard instances of graph coloring with the following <em>“null implementation effort”</em>:</p>

<ol>
  <li>Enumerate all possible columns</li>
  <li>Build a <a href="http://en.wikipedia.org/wiki/MPS_%28format%29">.mps</a> instance with those columns</li>
  <li>Use a MIP solver to solve the .mps instance</li>
</ol>

<p>Indeed, in this post we try to answer to the following question:</p>

<blockquote>
  <p>Is there any hope to solve any hard graph coloring instances with this naive approach?</p>
</blockquote>

<h2 id="formulation">Formulation</h2>
<p>Given an undirected graph <script type="math/tex">G=(V,E)</script> and a set of colors <script type="math/tex">K</script>, 
the minimum (vertex) graph coloring problem consists of assigning a color to each vertex,
while every pair of adjacent vertices gets a different color. The objective is to minimize the number of colors used in a solution.</p>

<p>The branch-and-price approach to graph coloring is based on a <em>set covering</em> formulation.
Let <script type="math/tex">S</script> be the collection of all the maximal stable sets of <script type="math/tex">G</script>,
and let <script type="math/tex">S_i \subseteq S</script> be the maximal stable sets that contain the vertex <script type="math/tex">i</script>.
Let <script type="math/tex">\lambda_s</script> be a 0-1 variable equal to 1 if all the vertices in the maximal stable set <script type="math/tex">s \in S</script> 
get assigned the same color. Hence, the set covering model is:</p>

<script type="math/tex; mode=display">\min \sum_{s \in S} \lambda_s \mbox{ such that } \sum_{s \in S_i} \lambda_s \geq 1, \forall i \in N, \lambda_s \in \{0,1\}, \forall s \in S.</script>

<p>Indeed, we <em>“cover”</em> every vertex of <script type="math/tex">G</script> with the minimal number of maximal stable sets.
The issue with this model is the total number of maximal stable sets in <script type="math/tex">G</script>, which <em>is exponential in the number of vertices of G</em>.</p>

<p>Column Generation is a “mathematically elegant” method to by-pass this issue:
it lets you to solve the set covering model by <em>generating</em> a very small subset of the elements in <script type="math/tex">S</script>. This happens by repeatedly solving an auxiliary problem,
called the <em>pricing</em> subproblem. For graph coloring, the pricing subproblem consists of a Maximum Weighted Stable Set problem.
If you are interested in Column Generation, I recommend you to look at the first chapter of
the <a href="http://www.springer.com/gp/book/9780387254852">Column Generation book</a>,
which contains a nice tutorial on the topic, and I would <strong>strongly</strong> recommend reading the nice survey “Selected Topics in Column Generation”, [4].</p>

<blockquote>
  <p>How many maximal stable sets are in a hard graph coloring instance?</p>
</blockquote>

<p>If this number were not so high, we could enumerate all the stable sets in <script type="math/tex">S</script>
and attempt to directly solve the set covering model without resorting to column generation.
However, <em>“high”</em> is a subjective measure, so let me do some computations on my laptop and give you some precise numbers.</p>

<h2 id="hard-instances">Hard instances</h2>
<p>Among the <a href="http://mat.gsia.cmu.edu/COLOR/instances.html">DIMACS instances</a> of Graph Coloring, there are a few instances
proposed by David Johnson, which are still unsolved (in the sense that we have not a computational proof of optimality of the best known upper bounds).</p>

<p>The table below shows the dimensions of these instances. The name of instances are DSJC{n}.{d}, where {n} is the number of vertices and {d} gives the density of the graph (e.g., DSJC125.9 has 125 vertices and 0.9 of density).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Graph</th>
      <th style="text-align: center">Nodes</th>
      <th style="text-align: center">Edges</th>
      <th style="text-align: center">Max stable sets</th>
      <th style="text-align: center">Enumeration Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DSJC125.9</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">6,961</td>
      <td style="text-align: center">524</td>
      <td style="text-align: center">0.00</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.9</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">27,897</td>
      <td style="text-align: center">2,580</td>
      <td style="text-align: center">0.01</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.9</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">112,437</td>
      <td style="text-align: center">14,560</td>
      <td style="text-align: center">0.12</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.9</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">449,449</td>
      <td style="text-align: center">100,389</td>
      <td style="text-align: center">2.20</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.5</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">3,891</td>
      <td style="text-align: center">43,268</td>
      <td style="text-align: center">0.53</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.5</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">15,668</td>
      <td style="text-align: center">1,470,363</td>
      <td style="text-align: center">43.16</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.5</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">62,624</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.5</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">249,826</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.1</td>
      <td style="text-align: center">125</td>
      <td style="text-align: center">736</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.1</td>
      <td style="text-align: center">250</td>
      <td style="text-align: center">3,218</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.1</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">12,458</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.1</td>
      <td style="text-align: center">1,000</td>
      <td style="text-align: center">49,629</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">out of memory</td>
    </tr>
  </tbody>
</table>

<p><br />
As you can see the number of maximal stable sets (i.e. the cardinality of <script type="math/tex">S</script>)
of several instances is not so high, above all for very dense graphs, where the number of stables set is less than the number of edges. However, for sparse graphs, the number of maximal stable sets is too large for the memory available in my laptop.</p>

<p>Now, let me re-state the main question of this post:</p>

<blockquote>
  <p>Can we <strong>enumerate</strong> all the maximal stable sets of <script type="math/tex">G</script> and use a  MIP solver such as <a href="http://www.gurobi.com/">Gurobi</a> or <a href="http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/">CPLEX</a> to solve any Johnson’s instance of Graph Coloring?</p>
</blockquote>

<h2 id="results">Results</h2>
<p>I have written a small script which uses <a href="http://users.aalto.fi/~pat/cliquer.html">Cliquer</a> to enumerate all the maximal
stable sets of a graph, and then I generate an <a href="http://en.wikipedia.org/wiki/MPS_%28format%29">.mps</a>
instance for each of the DSJC instance where I was able to store all maximal stable sets.
The .mps file are on my public <a href="https://github.com/stegua/MyBlogEntries/tree/master/Coloring">GitHub repository for this post</a>.</p>

<p>The table below shows some numbers for the sparse instances obtained using Gurobi (v6.0.0)
with a timeout of 10 minutes on my laptop. If you compare these numbers with the results published in the literature, you can see that they are not bad at all.</p>

<p>Believe me, these number are not bad at all, and establish a new <strong>TIME RECORD</strong>.</p>

<p>For example, the instance DSJC250.9 was solved to optimality only recently in
11094 seconds by [3], while the column enumeration approach solves the same instance on a similar hardware in only 23 seconds (!), and, honestly, our work in [2] did not solve this instance to optimality at all.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Graph</th>
      <th style="text-align: center">Best known</th>
      <th style="text-align: center">Enum. Time</th>
      <th style="text-align: center">Run time</th>
      <th style="text-align: center">LB</th>
      <th style="text-align: center">UB</th>
      <th style="text-align: center">Time [2]</th>
      <th style="text-align: center">LB[2]</th>
      <th style="text-align: center">UB [2]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DSJC125.9</td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center">0.00</td>
      <td style="text-align: center"><strong>0.44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center">44</td>
      <td style="text-align: center"><strong>44</strong></td>
      <td style="text-align: center"><strong>44</strong></td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.9</td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center">0.01</td>
      <td style="text-align: center"><strong>23</strong></td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center"><strong>72</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">71</td>
      <td style="text-align: center">72</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC500.9</td>
      <td style="text-align: center">128</td>
      <td style="text-align: center">0.12</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">123</td>
      <td style="text-align: center"><strong>128</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">123</td>
      <td style="text-align: center">136</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC1000.9</td>
      <td style="text-align: center">222</td>
      <td style="text-align: center">2.20</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">215</td>
      <td style="text-align: center"><strong>229</strong></td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">215</td>
      <td style="text-align: center">245</td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC125.5</td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center">0.53</td>
      <td style="text-align: center"><strong>70.6</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center">19033</td>
      <td style="text-align: center"><strong>17</strong></td>
      <td style="text-align: center"><strong>17</strong></td>
    </tr>
    <tr>
      <td style="text-align: left">DSJC250.5</td>
      <td style="text-align: center">28</td>
      <td style="text-align: center">43.16</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">26</td>
      <td style="text-align: center">33</td>
      <td style="text-align: center">timeout</td>
      <td style="text-align: center">26</td>
      <td style="text-align: center">31</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<blockquote>
  <p>Can we ever solve to optimality DSJC500.9 and DSJC1000.9 via Column Enumeration?</p>
</blockquote>

<p>I would say:</p>

<blockquote>
  <p>“Yes, we can!”</p>
</blockquote>

<p>… but likely we need to be smarter while branching on the decision variables, since the default branching strategy of a generic MIP solver does not exploit the structure of the problem. If I had the time to work again on Graph Coloring, I would likely use the same branching scheme used in [2], where we combined a Zykov’s branching rule with a randomized <a href="http://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search">iterative deepening depth-first search</a> (randomised because at each restart we were using a different initial pool of columns). Another interesting option would be to tighten the set covering formulation with valid inequalities, by starting with those studied in [5]. </p>

<p>In conclusion, I believe that enumerating all columns can be a simple but good starting point to attempt to solve to optimality at least the instances DSJC500.9 and DSJC1000.9.</p>

<p>Do you have some spare time and are you willing to take up the challenge?</p>

<h2 id="references">References</h2>
<ol>
  <li>
    <p>A Mehrotra, MA Trick.
<span class="title">A column generation approach for graph coloring</span>.
<span class="journal">INFORMS Journal on Computing</span>. Fall 1996 vol. 8(4), pp.344-354. 
<a href="http://joc.journal.informs.org/content/8/4/344.short ">[pdf]</a></p>
  </li>
  <li>
    <p>S. Gualandi and F. Malucelli.
<span class="title">Exact Solution of Graph Coloring Problems via Constraint Programming and Column Generation</span>.
<span class="journal">INFORMS Journal on Computing</span>. Winter 2012 vol. 24(1), pp.81-100. 
<a href="http://joc.journal.informs.org/content/24/1/81.short">[pdf]</a>
<a href="http://www.optimization-online.org/DB_FILE/2010/03/2568.pdf">[preprint]</a></p>
  </li>
  <li>
    <p>S. Held, W. Cook, E.C. Sewell.
<span class="title">Maximum-weight stable sets and safe lower bounds for graph coloring</span>.
<span class="journal">Mathematical Programming Computation</span>. December 2012, Volume 4, Issue 4, pp 363-381.
<a href="http://link.springer.com/content/pdf/10.1007%2Fs12532-012-0042-3.pdf">[pdf]</a></p>
  </li>
  <li>
    <p>M. Lubbecke and J. Desrosiers.
<span class="title">Selected topics in column generation</span>.
<span class="journal">Operations Research</span>. 2005, Volume 53, Issue 6, pp 1007-1023.
<a href="http://pubsonline.informs.org/doi/abs/10.1287/opre.1050.0234">[pdf]</a></p>
  </li>
  <li>
    <p>
<span class="title">Set covering and packing formulations of graph coloring: algorithms and first polyhedral results</span>.
<span class="journal">Discrete Optimization</span>. 2009, Volume 6, Issue 2, pp 135-147.
<a href="http://www.sciencedirect.com/science/article/pii/S1572528608000716">[pdf]</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From blackboard to code: Gomory Cuts using CPLEX]]></title>
    <link href="http://stegua.github.io/blog/2013/02/05/gomory-cuts-with-cplex/"/>
    <updated>2013-02-05T15:22:00+01:00</updated>
    <id>http://stegua.github.io/blog/2013/02/05/gomory-cuts-with-cplex</id>
    <content type="html"><![CDATA[<p><strong>Edited on May 16th, 2013</strong>: fixes due to <a href="http://imada.sdu.dk/~marco/">M. Chiarandini</a></p>

<p>On the blackboard, to solve small Integer Linear Programs with 2 variables and <em>less or equal</em> constraints is easy,
since they can be plotted in the plane and the linear relaxation can be solved geometrically. 
You can draw the lattice of integer points, and once you have found a new cutting plane, 
you show that it <em>cuts off</em> the optimum solution of the LP relaxation.</p>

<p>This post presents a naive (textbook) implementation of <strong>Fractional Gomory Cuts</strong> that uses the basic solution
computed by CPLEX, the commercial Linear Programming solver used in our lab sessions.
In practice, this post is an online supplement to one of my last exercise session.</p>

<p>In order to solve the <em>“blackboard”</em> examples with <a href="http://www-01.ibm.com/software/integration/optimization/cplex-optimizer/">CPLEX</a>,
it is necessary to use a couple of functions
that a few years ago were undocumented. <a href="http://www.gurobi.com">GUROBI</a> has very similar functions,
but they are currently undocumented. (<strong>Edited May 16th, 2013</strong>: From version 5.5, Gurobi has documented its 
<a href="http://www.gurobi.com/documentation/5.5/reference-manual/node109">advanced simplex routines</a>)</p>

<p>As usual, all the sources used to write this post are publicly available on 
<a href="https://github.com/stegua/MyBlogEntries/tree/master/GomoryCut">my GitHub repository</a>.</p>

<h3 id="the-basics">The basics</h3>
<p>Given a Integer Linear Program in the form:</p>

<script type="math/tex; mode=display">(P) \qquad \min \{ cx \mid Ax \leq b, \, x \geq 0, \, x \mbox{ integer} \}</script>

<p>it is possible to rewrite the problem in standard form by adding slack variables:</p>

<script type="math/tex; mode=display">(P) \qquad \min \{ cx \mid Ax + Ix_S = b, \, x \geq 0, \, x \mbox{ integer}, \, x_S \geq 0 \}</script>

<p>where <script type="math/tex">I</script> is the identity matrix and <script type="math/tex">x_S</script> is a vector of slack variables, one for each constraint in <script type="math/tex">(P)</script>.
Let us denote by <script type="math/tex">(\bar{P})</script> the linear relaxation of <script type="math/tex">(P)</script> obtained by relaxing the integrality constraint.</p>

<p>The optimum solution vector of <script type="math/tex">(\bar{P})</script>, if it exists and it is finite, it is used to derive a basis
(for a formal definition of <strong>basis</strong>, see [1] or [3]).
Indeed, the basis partitions the columns of matrix <script type="math/tex">A</script> into two submatrices
<script type="math/tex">B</script> and <script type="math/tex">N</script>, where <script type="math/tex">B</script> is given by the columns corresponding to the basic variables,
and <script type="math/tex">N</script> by columns corresponding to variables out of the base (they are equal to zero in the optimal solution vector).</p>

<p>Remember that, by definition, <script type="math/tex">B</script> is nonsingular and therefore is invertible. 
Using the matrices <script type="math/tex">B</script> and <script type="math/tex">N</script>, it is easy to derive the following inequalities (for details, see any OR textbook, e.g., [1]): </p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{eqnarray}
&Ax = b & \\
&Bx_B + Nx_N = b& \\
&x_B + B^{-1}N\,x_N = B^{-1}\,b & \qquad B \mbox{ is nonsingular} \\
&x_B + \lfloor B^{-1}N \rfloor \,x_N \leq B^{-1}\,b &\qquad  \mbox{since }x \geq 0 \\
&x_B + \lfloor B^{-1}N \rfloor \,x_N \leq \lfloor B^{-1}\,b \rfloor& \qquad x \mbox{ is integer}
\end{eqnarray} %]]&gt;</script>

<p>where the operator <script type="math/tex">\lfloor \cdot \rfloor</script> is applied component wise to the matrix elements.
In practice, for each fractional basic variable, it is possible to generate a valid Gomory cut.</p>

<p>The key step to generate Gomory cuts is to get an optimal basis or, even better, the inverse of the basis matrix <script type="math/tex">B^{-1}</script>
multiplied by <script type="math/tex">A</script> and by <script type="math/tex">b</script>. Once we have that matrix, in order to generate a Gomory cut from a fractional
basic variable, we just use the last equation in the previous derivation, applying it to each row of the system of inequalities</p>

<p>Given the optimal basis, the optimal basic vector is <script type="math/tex">x_B=B^{-1}b</script>, since the non basic variables are equal to zero.
Let <script type="math/tex">j</script> be the index of a fractional basic variable, and let <script type="math/tex">i</script> be the index of the constraint corresponding to
variable <script type="math/tex">j</script> in the equations <script type="math/tex">x_B=B^{-1}A</script>, then the Gomory cut for variable <script type="math/tex">j</script> is:</p>

<script type="math/tex; mode=display">x_j + \sum_{l \in N} \lfloor (B^{-1}N)_{il} \rfloor\,x_l \leq \lfloor (B^{-1}\,b)_i \rfloor</script>

<h3 id="using-the-cplex-callable-library">Using the CPLEX callable library</h3>
<p>The CPLEX callable library (written in C) has the following <em>advanced</em> functions:</p>

<ul>
  <li><a href="http://pic.dhe.ibm.com/infocenter/cosinfoc/v12r5/index.jsp?topic=%2Filog.odms.cplex.help%2Frefcallablelibrary%2Fhtml%2Ffunctions%2FCPXbinvarow.html">CPXbinvarow</a> computes the <em>i</em>-th row of the tableau</li>
  <li><a href="http://pic.dhe.ibm.com/infocenter/cosinfoc/v12r5/index.jsp?topic=%2Filog.odms.cplex.help%2Frefcallablelibrary%2Fhtml%2Ffunctions%2FCPXbinvrow.html">CPXbinvrow</a> computes the <em>i</em>-th row of the basis inverse</li>
  <li><a href="http://pic.dhe.ibm.com/infocenter/cosinfoc/v12r5/index.jsp?topic=%2Filog.odms.cplex.help%2Frefcallablelibrary%2Fhtml%2Ffunctions%2FCPXbinvacol.html">CPXbinvacol</a> computes the representation of the <em>j</em>-th column in terms of the basis</li>
  <li><a href="http://pic.dhe.ibm.com/infocenter/cosinfoc/v12r5/index.jsp?topic=%2Filog.odms.cplex.help%2Frefcallablelibrary%2Fhtml%2Ffunctions%2FCPXbinvcol.html">CPXbinvcol</a> computes the <em>j</em>-th column of the basis inverse</li>
</ul>

<p>Using the first two functions, Gomory cuts from an optimal base can be generated as follows:</p>

<p><code>c++ Gomory cut https://github.com/stegua/MyBlogEntries/blob/master/GomoryCut/cpx_gomory.c Fork Me on GitHub
printf("\nGenerate Gomory cuts:\n");
idx = 0;
cut = 0;  /// Index of cut to be added
for ( i = 0; i &lt; m-1; ++i ) 
if ( floor(b_bar[i]) != b_bar[i] ) {
   printf("Row %d gives cut -&gt;   ", i+1);
   POST_CMD( CPXbinvarow(env, model, i, z) );
   rmatbeg[cut] = idx;
   for ( j = 0; j &lt; n1; ++j ) {
      z[j] = floor(z[j]); /// DANGER!
      if ( z[j] != 0 ) {
         rmatind[idx] = j;
         rmatval[idx] = z[j];
         idx++;
      }
      /// Print the cut
      if ( z[j] &gt;= 0 ) printf("+");
      printf("%.1f x%d ", z[j], j+1);
   }
   gc_rhs[cut] = floor(b_bar[i]); /// DANGER!
   gc_sense[cut] = 'L';
   printf("&lt;= %.1f\n", gc_rhs[cut]);
   cut++;
}
/// Add the new cuts
POST_CMD( CPXaddrows (env, model, 0, n_cuts, idx, gc_rhs, gc_sense, 
         rmatbeg, rmatind, rmatval, NULL, NULL) );
</code></p>

<p>The code reads row by row (index <em>i</em>) the inverse basis matrix <script type="math/tex">B^{-1}</script> multiplied by <script type="math/tex">A</script> (line 7),
which is temporally stored in vector <code>z</code>,
and then the code stores the corresponding Gomory cut in the compact matrix given by vectors <code>rmatbeg</code>, <code>rmatind</code>, and <code>rmatval</code> (lines 8-15).
The array <code>b_bar</code> contains the vector <script type="math/tex">B^{-1}b</script> (line 21). In lines 26-27, all the cuts are added at once to the current LP data structure.</p>

<p>On GitHub you find a small program that I wrote to generate Gomory cuts for problems written as <script type="math/tex">(P)</script>.
The repository have an <a href="https://github.com/stegua/MyBlogEntries/blob/master/GomoryCut/README.md">example of execution</a> of my program.</p>

<p>The code is simple only because it is designed for small IPs in the form
<script type="math/tex"> \min\, \{\, cx \mid Ax\, \leq\,b,\, x\geq 0\}</script>.
Otherwise, the code <strong>must</strong> consider the effects of preprocessing, different sense of the constraints,
and additional constraints introduced because of range constraints.</p>

<p>If you are interested in a <strong>real</strong> implementation of <strong>Mixed-Integer Gomory cuts</strong>, 
that are a generalization of Fractional Gomory cuts to <strong>mixed integer linear programs</strong>, 
please look at the <a href="http://scip.zib.de/doc/html/sepa__gomory_8h.shtml">SCIP source code</a>.</p>

<h3 id="additional-readings">Additional readings</h3>
<p>The introduction of Mixed Integer Gomory cuts 
in CPLEX was <strong>The</strong> major breakthrough of CPLEX 6.5 and produced
the version-to-version speed-up given by the blue bars in the chart below
(source: <a href="http://www.ferc.gov/eventcalendar/Files/20100609110044-Bixby,%20Gurobi%20Optimization.pdf">Bixby’s slides available on the web</a>):</p>

<p>{% img http://stegua.github.io/images/cplex65.png %}</p>

<p>Gomory cuts are still subject of research, since they pose a number of implementation challenges. 
These cuts suffer from severe numerical issues, mainly because the computation of the inverse matrix
requires the division by its determinant.</p>

<blockquote>
  <p>“In 1959, […] We started to experience the unpredictability of the computational results rather steadily” (Gomory, see [4]).”</p>
</blockquote>

<p>A recent paper by Cornuejols, Margot, and Nannicini deals with some of these issues [2].</p>

<p>If you like to learn more about how the basis are computed in the CPLEX LP solver, there is very nice paper
by Bixby [3]. The paper explains different approaches to get the first basic feasible solution and
gives some hints of the CPLEX implementation of that time, i.e., 1992. Though the paper does not deal with Gomory
cuts directly, it is a very pleasant reading.</p>

<p>To conclude, for those of you interested in <a href="http://www.math.uiuc.edu/documenta/vol-ismp/vol-ismp.html">Optimization Stories</a>
there is a nice chapter by G. Cornuejols about the <strong>Ongoing Story of Gomory Cuts</strong> [4].</p>

<h2 id="references">References</h2>
<ol>
  <li>
    <p>C.H. Papadimitriou, K. Steiglitz.
<span class="title">Combinatorial Optimization: Algorithms and Complexity</span>. 1998.
<a href="http://www.amazon.com/Combinatorial-Optimization-Algorithms-Complexity-Computer/dp/0486402584">[book]</a></p>
  </li>
  <li>
    <p>G. Cornuejols, F. Margot and G. Nannicini.
<span class="title">On the safety of Gomory cut generators</span>. Submitted in 2012.
<span class="journal">Mathematical Programming Computation, under review.</span> 
<a href="http://faculty.sutd.edu.sg/~nannicini/papers/testing_gomory.pdf">[preprint]</a></p>
  </li>
  <li>
    <p>R.E. Bixby.
<span class="title">Implementing the Simplex Method: The Initial Basis</span>.
<span class="journal">Journal on Computing</span> vol. 4(3), pages 267--284, 1992.
<a href="http://joc.journal.informs.org/content/4/3/267.short">[abstract]</a></p>
  </li>
  <li>
    <p>G. Cornuejols.
<span class="title">The Ongoing Story of Gomory Cuts</span>.
<span class="journal">Documenta Mathematica - Optimization Stories.</span> Pages 221-226, 2012.
<a href="http://www.math.uiuc.edu/documenta/vol-ismp/37_cornuejols-gerard.pdf">[preprint]</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
